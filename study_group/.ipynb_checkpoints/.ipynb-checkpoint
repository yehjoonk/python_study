{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Cluster Analysis (군집분석)\n",
    "\n",
    "비지도학습(Unsupervised Learning)에 속하는 머신러닝 기법.\n",
    "\n",
    "- eg: pattern recognition, image analysis, bioinformatics, customer segmentation\n",
    "\n",
    "### K-Means Clustering Algorithm\n",
    "n개의 data와 k개라는 class 갯수가 주어졌을때, 각각의 class들에 속한 점들간의 분산을 최소화하는게 k-clustering의 목적입니다. 즉, 근처에 있는 data들끼리 모아서 하나의 class로 선언하는 방식입니다.\n",
    "\n",
    "![Random Unsplash Image](https://www.ncbi.nlm.nih.gov/books/NBK543520/bin/463627_1_En_9_Fig4_HTML.jpg)\n",
    "\n",
    "k-means 알고리즘은 cluster의 중심이 되는 cluster centroid를 임의로 k개 만큼 선정하고, 각 점으로부터 거리를 계산하여 모든 data의 Class를 할당, 모든 Class들의 무게중심으로 centroid를 이동, 다시 각 점으로부터의 거리를 계싼하여 class할당... 을 반복하는 알고리즘입니다. 이후 cluster centeroid가 최적의 위치로 이동하게 되면, 더이상 이동하지 않으며, 그때 iteration을 종료하게됩니다. \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "- 참고영상: https://www.youtube.com/watch?v=YIGtalP1mv0\n",
    "\n",
    "- 데이터 출처: https://www.kaggle.com/vjchoudhary7/customer-segmentation-tutorial-in-python\n",
    "\n",
    "\n",
    "#### Pros \n",
    "\n",
    "- 쉽고 간편한 연산\n",
    "- 큰 데이터셋에 적응가능(scalable)\n",
    "- 패턴이 뚜렷하지 않은 데이터에도 적용 가능\n",
    "\n",
    "#### Cons\n",
    "\n",
    "- k 값을 임의로 정해야 함\n",
    "- outlier에 민감함"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import & Explore Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import data\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "df = pd.read_csv(\"Mall_Customers.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 데이터 클리닝 할 때 유용한것들 몇가지\n",
    "- df.shape : 크기확인\n",
    "- df.renmae(columns = {'old_name' : 'new_name'}) : columns 이름 바꿔주기\n",
    "- df.stypes : 데이터 타입 확인\n",
    "- df.describe() : 각 컬럼의 데이터를 요약해서 보여줌\n",
    "- df.isnull().sum() : null 값 확인\n",
    "- df.dropna(how = \"all\") : 모든 null값 삭제 \n",
    "- df.columnname.unique() : unique 한 값들 보여줌\n",
    "- len(df.columnname.unique()) : 해당 컬럼에 unique 한 값이 몇개인지 확인 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.rename(columns = {'CustomerID' : 'id', 'Gender': 'gender', 'Age' : 'age', 'Annual Income (k$)':'annual_income', 'Spending Score (1-100)': 'spending_score'}, inplace = True)\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(df['age'].max())\n",
    "print(df['spending_score'].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.isnull().sum()\n",
    "\n",
    "#만약 null 값이 있으면, df = df.dropna(how='all')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.gender.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "len(df.id.unique())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Groupby\n",
    "\n",
    "* 공식문서: https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.groupby.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# group customers by 'gender',\n",
    "# and count the number of customers in each group. \n",
    "\n",
    "df2 = df.groupby('gender').id.count().reset_index()\n",
    "df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# group customers by 'gender', \n",
    "# and calculate the average age per gender using mean() method.\n",
    "\n",
    "df3 = df.groupby('gender').age.mean().reset_index()\n",
    "df3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# group customers by 'gender' and 'age',  \n",
    "# and calculate the average annual income using mean() method.\n",
    "\n",
    "df4 = df.groupby(['gender', 'age']).annual_income.mean().reset_index()\n",
    "df4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### One Hot Encoding\n",
    "\n",
    "기계가 읽어들일수 없는 값들(Categorical Variables)을 1과 0의 숫자로 변환하는 과정\n",
    "\n",
    "- **pd.get_dummies(df, coulmns = ['column_name'])**\n",
    "\n",
    "![Random Unsplash Image](https://miro.medium.com/max/1400/1*O_pTwOZZLYZabRjw3Ga21A.png)\n",
    "\n",
    "\n",
    "- 공식문서: https://pandas.pydata.org/docs/reference/api/pandas.get_dummies.html\n",
    "- 참고용 블로그: https://blog.naver.com/oys0608/222324158962"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.get_dummies(df, columns = ['gender'])\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Normalisation \n",
    "\n",
    "분석 전에 데이터를 정규화(normalization)하여 데이터의 스케일을 0과 1사이로 맞춰주는 작업. \n",
    "\n",
    "![Random Unsplash Image](https://i2.wp.com/cmdlinetips.com/wp-content/uploads/2020/06/Quantile_Normalization_in_Python.png?w=379&ssl=1)\n",
    "\n",
    "![Random Unsplash Image](https://i0.wp.com/cmdlinetips.com/wp-content/uploads/2020/06/Boxplot_after_Quantile_Normalization_Seaborn.png?w=603&ssl=1)\n",
    "\n",
    "* sklearn.preprocessing 라이브러리의 MinMaxScaler 클래스 이용. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import MinMaxScaler\n",
    "\n",
    "scaler = MinMaxScaler()\n",
    "df[ : ] = scaler.fit_transform(df[ : ])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Customer Segmentation with K-Means Clustering "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.cluster import KMeans\n",
    "\n",
    "# WCSS (Within-Cluster-Sum-of-Squares  is the sum of squares of the distances of each data point in all clusters to their respective centroids.)\n",
    "\n",
    "wcss = []\n",
    "for i in range(1,11):\n",
    "    kmeans = KMeans(n_clusters = i, init = 'k-means++', random_state = 42)\n",
    "    kmeans.fit(df)\n",
    "    wcss.append(kmeans.inertia_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure(figsize = (10,8))\n",
    "plt.plot(range(1, 11), wcss, marker = 'o', linestyle = '--')\n",
    "plt.xlabel('Number of Clusters')\n",
    "plt.ylabel('WCSS')\n",
    "plt.title('K-means Clustering')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We run K-means with a fixed number of clusters. In our case 2.\n",
    "kmeans = KMeans(n_clusters = 2, init = 'k-means++', random_state = 42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "kmeans.fit(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_segm_kmeans = df.copy()\n",
    "df_segm_kmeans['Segment K-means'] = kmeans.labels_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_segm_analysis = df_segm_kmeans.groupby(['Segment K-means']).mean()\n",
    "df_segm_analysis"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
